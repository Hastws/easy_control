name: build-and-release

on:
  push:
    tags: [ "v*" ]
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: build-and-release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      # ---------- Deps ----------
      - name: Deps (Ubuntu)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build pkg-config nsis dpkg-dev \
                                  libx11-dev libxtst-dev libxrandr-dev libxfixes-dev
          # 如启用 Wayland portal：
          # sudo apt-get install -y libwayland-dev libglib2.0-dev

      - name: Deps (macOS)
        if: startsWith(matrix.os, 'macos')
        run: |
          brew update
          brew install cmake ninja

      - name: Deps (Windows)
        if: startsWith(matrix.os, 'windows')
        shell: pwsh
        run: choco install -y ninja nsis

      # ---------- Choose CPack generator per-OS ----------
      - name: Select CPack generator
        id: gen
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            echo "CPACK_GEN=DEB;TGZ" >> "$GITHUB_OUTPUT"
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            echo "CPACK_GEN=productbuild;DragNDrop" >> "$GITHUB_OUTPUT"
          else
            echo "CPACK_GEN=NSIS" >> "$GITHUB_OUTPUT"
          fi
          echo "Using CPack generators: $(cat $GITHUB_OUTPUT)"

      # ---------- Configure ----------
      - name: Configure
        run: >
          cmake -S . -B build -G Ninja
          -DCMAKE_BUILD_TYPE=Release
          -DCPACK_GENERATOR="${{ steps.gen.outputs.CPACK_GEN }}"

      # ---------- Build ----------
      - name: Build
        run: cmake --build build --config Release --parallel

      # ---------- Package (call cpack; generators already set) ----------
      - name: Package
        run: |
          cpack --config build/CPackConfig.cmake -C Release
        # 也可单发某个：cpack -G DEB --config build/CPackConfig.cmake -C Release

      # 可视化
      - name: List outputs
        shell: bash
        run: |
          echo "== build root =="
          ls -lah build || true
          echo "== CPack staging =="
          find build/_CPack_Packages -maxdepth 4 -type f -print 2>/dev/null || true

      # ---------- Upload per-OS artifacts ----------
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-packages
          path: |
            # Linux
            build/*.deb
            build/*.tar.gz
            build/_CPack_Packages/**/DEB/*.deb
            build/_CPack_Packages/**/TGZ/*.tar.gz
            # macOS
            build/*.pkg
            build/*.dmg
            build/_CPack_Packages/**/productbuild/*.pkg
            build/_CPack_Packages/**/DragNDrop/*.dmg
            # Windows（仅安装器；不带 demo exe）
            build/*easy_control-*.exe
          if-no-files-found: warn

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist

      # 归并、去重、规范文件名
      - name: Normalize filenames (dedupe basenames)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist/release

          mapfile -t files < <(find dist -type f \( \
              -name 'easy_control-*.deb' -o \
              -name 'easy_control-*.tar.gz' -o \
              -name 'easy_control-*.dmg' -o \
              -name 'easy_control-*.pkg' -o \
              -name 'easy_control-*.exe' \
            \) -print | sort)

          echo "Found packages:"
          printf '  %s\n' "${files[@]}"

          for f in "${files[@]}"; do
            base="$(basename "$f")"
            target="dist/release/${base}"
            if [[ -e "$target" ]]; then
              parent="$(basename "$(dirname "$f")")"
              target="dist/release/${parent}-${base}"
              i=1
              while [[ -e "$target" ]]; do
                target="dist/release/${parent}-${i}-${base}"
                i=$((i+1))
              done
            fi
            cp -f "$f" "$target"
          done

          echo "== release payload =="
          ls -lah dist/release

      # 动态收集已存在文件，避免 unmatched_files 报错
      - name: Collect release files
        id: collect
        shell: bash
        run: |
          set -euo pipefail
          echo "files<<EOF" >> "$GITHUB_OUTPUT"
          shopt -s nullglob
          for f in dist/release/easy_control-*.*; do
            echo "$f"
          done
          echo "EOF" >> "$GITHUB_OUTPUT"
          echo "== Will upload:"
          printf '  %s\n' ${{ steps.collect.outputs.files || '' }} || true

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          fail_on_unmatched_files: true
          files: ${{ steps.collect.outputs.files }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
